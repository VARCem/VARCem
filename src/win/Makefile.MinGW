#
# VARCem	Virtual ARchaeological Computer EMulator.
#		An emulator of (mostly) x86-based PC systems and devices,
#		using the ISA,EISA,VLB,MCA  and PCI system buses, roughly
#		spanning the era between 1981 and 1995.
#
#		This file is part of the VARCem Project.
#
#		Makefile for Windows systems using the MinGW32 environment.
#
# Version:	@(#)Makefile.MinGW	1.0.110	2023/02/23
#
# Author:	Fred N. van Kempen, <waltje@varcem.com>
#
#		Copyright 2017-2023 Fred N. van Kempen.
#
#		Redistribution and  use  in source  and binary forms, with
#		or  without modification, are permitted  provided that the
#		following conditions are met:
#
#		1. Redistributions of  source  code must retain the entire
#		   above notice, this list of conditions and the following
#		   disclaimer.
#
#		2. Redistributions in binary form must reproduce the above
#		   copyright  notice,  this list  of  conditions  and  the
#		   following disclaimer in  the documentation and/or other
#		   materials provided with the distribution.
#
#		3. Neither the  name of the copyright holder nor the names
#		   of  its  contributors may be used to endorse or promote
#		   products  derived from  this  software without specific
#		   prior written permission.
#
# THIS SOFTWARE  IS  PROVIDED BY THE  COPYRIGHT  HOLDERS AND CONTRIBUTORS
# "AS IS" AND  ANY EXPRESS  OR  IMPLIED  WARRANTIES,  INCLUDING, BUT  NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE  ARE  DISCLAIMED. IN  NO  EVENT  SHALL THE COPYRIGHT
# HOLDER OR  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE  GOODS OR SERVICES;  LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  AND ON  ANY
# THEORY OF  LIABILITY, WHETHER IN  CONTRACT, STRICT  LIABILITY, OR  TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  IN ANY  WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# Various compile-time options.
ifndef STUFF
 STUFF		:=
endif

# Add feature selections here.
ifndef EXTRAS
 EXTRAS		:=
endif

# Defaults for several build options (possibly defined in a chained file.)
ifndef WX
 WX		:= n
endif


# Which modules to include a development build.
ifeq ($(DEV_BUILD), y)
 DEV_BRANCH	:= y
 AMD_K		:= y
 COMPAQ		:= y
# SANYO		:= n
 MICRAL		:= y
 SUPERSPORT	:= y
 PAS16		:= y
 GUSMAX		:= y
 XL24		:= y
 WONDER		:= y
 HOSTCD		:= y
# MODRIVES	:= n
endif


# What is the location of our external dependencies?
ifeq ($(EXT_PATH), )
 EXT_PATH	:= ../external
endif


# WxWidgets basic info. Extract using the config program.
ifneq ($(WX), n)
 EXPATH		+= wx
 WX_CONFIG	:= wx-config.exe
 ifeq ($(WX), y)
  WX_PATH	:= C:/MinGW32/WxWidgets
  WX_FLAGS	:= -I$(WX_PATH)/lib/wx/include/msw-unicode-3.0 \
		   -I$(WX_PATH)/include/wx-3.0 \
		   -D__WXMSW__ -DWX_PRECOMP -D_FILE_OFFSET_BITS=64 -pthread
#		   -lwx_mswu_gl-3.0 -lwxtiff-3.0 -llzma
  WX_LIBS	:= -mwindows -mthreads -L$(WX_PATH)/lib \
		   -lwx_mswu-3.0.dll \
		   -lrpcrt4 -loleaut32 -lole32 -luuid \
		   -lwinspool -lwinmm -lshell32 -lcomctl32 \
		   -lcomdlg32 -ladvapi32 -lwsock32 -lgdi32
 endif
 ifeq ($(WX), static)
  WX_PATH	:= C:/MinGW32/WxWidgets
  WX_FLAGS	:= -I$(WX_PATH)/lib/wx/include/msw-unicode-3.0 \
		   -I$(WX_PATH)/include/wx-3.0 \
		   -D__WXMSW__ -DWX_PRECOMP -D_FILE_OFFSET_BITS=64 -pthread
#		   -lwx_mswu_gl-3.0 -lwxtiff-3.0 -llzma
  WX_LIBS	:= -mwindows -mthreads -L$(WX_PATH)/lib \
		   -lwx_mswu-3.0 -lwxscintilla-3.0 \
		   -lwxjpeg-3.0 -lwxpng-3.0 -lwxzlib-3.0 \
		   -lwxregexu-3.0 -lwxexpat-3.0 \
		   -lrpcrt4 -loleaut32 -lole32 -luuid \
		   -lwinspool -lwinmm -lshell32 -lcomctl32 \
		   -lcomdlg32 -ladvapi32 -lwsock32 -lgdi32
 endif
endif


#########################################################################
#		Nothing should need changing from here on..		#
#########################################################################
VPATH		:= $(EXPATH) . cpu \
		   devices \
		    devices/chipsets devices/system devices/sio \
		    devices/input devices/input/game devices/ports \
		    devices/network devices/printer devices/misc \
		    devices/floppy devices/floppy/lzf \
		    devices/disk devices/cdrom devices/scsi \
		    devices/sound devices/video \
		   machines misc ui win

#
# Name of the executable.
#
NETIF		:= pcap_if
ifndef PROG
 ifneq ($(WX), n)
  PROG		:= WxVARCem
 else
  PROG		:= VARCem
 endif
endif
ifeq ($(DEBUG), y)
 PROG		:= $(PROG)-d
 NETIF		:= $(NETIF)-d
 override LOGGING := y
else
 ifeq ($(LOGGING), y)
  PROG		:= $(PROG)-l
 endif
endif

#
# Select the required build environment. We have, uhm, many..
#
ifeq ($(CROSS), y)
 # Where are the cross-compiler tools located?
 ifndef CROSS_PATH
  # DO NOT CHANGE THIS DEFAULT VALUE - needed for CI systems!
  CROSS_PATH	:= /usr/bin/
 endif

 # Cross-compiling (under Linux), select proper version.
 ifeq ($(X64), y)
  MINGW		:= $(CROSS_PATH)x86_64-w64-mingw32-
  CPP		:= $(MINGW)g++ -m64
  CC		:= $(MINGW)gcc -m64
  ARCH		:= x64
 else
  MINGW		:= $(CROSS_PATH)i686-w64-mingw32-
  CPP		:= $(MINGW)g++ -m32
  CC		:= $(MINGW)gcc -m32
  ARCH		:= x86
 endif
 PREPROC	:= $(MINGW)cpp -P
 WINDRES	:= $(MINGW)windres
 STRIP		:= $(MINGW)strip
 ifndef CAT
  CAT		:= cat
 endif
else
 # Native compilation using MinGW for Windows.
 CPP		:= g++ -m32
 CC		:= gcc -m32
 PREPROC	:= cpp -P
 WINDRES	:= windres
 STRIP		:= strip
 ifndef CAT
  CAT		:= cat
 endif

 # Overrides for Windows, X64.
 ifeq ($(X64), y)
  CPP		:= g++ -m64
  CC		:= gcc -m64
  ARCH		:= x64
 else
  ARCH		:= x86
 endif

 # Overrides for Windows, ARM.
 ifeq ($(ARM), y)
  ARCH		:= armv7-w64
  CPP		:= $(ARCH)-mingw32-g++
  CC		:= $(ARCH)-mingw32-gcc
  WINDRES	:= $(ARCH)-mingw32-windres
  STRIP		:= $(ARCH)-mingw32-strip
 endif

 # Overrides for Windows, ARM64.
 ifeq ($(ARM64), y)
  ARCH		:= aarch64-w64
  CPP		:= $(ARCH)-mingw32-g++
  CC		:= $(ARCH)-mingw32-gcc
  WINDRES	:= $(ARCH)-mingw32-windres
  STRIP		:= $(ARCH)-mingw32-strip
 endif
endif

DEPS		= -MMD -MF $*.d -c $<
DEPFILE		:= win/.depends-mingw

# Set up the correct toolchain flags.
OPTS		:= $(EXTRAS) $(STUFF) \
		   -D_CRT_NON_CONFORMING_SWPRINTFS \
		   -D__USE_MINGW_ANSI_STDIO_X
RFLAGS		:= --input-format=rc -O coff
LFLAGS		:=
O		:= .o

# Options fow Windows, X86.
AFLAGS		:= -msse2 -mfpmath=sse
ifeq ($(OPTIM), y)
 DFLAGS		:= -march=native
else
 DFLAGS		:= -march=i686
endif

# Options for Windows, X64.
ifeq ($(X64), y)
 ifeq ($(OPTIM), y)
  DFLAGS	:= -march=native
 else
  DFLAGS	:= -march=x86-64
 endif
endif

# Options for Windows, ARM.
ifeq ($(ARM), y)
 AFLAGS		:= -mfloat-abi=hard
 DFLAGS		:= -march=armv7-a
endif

# Options for Windows, ARM64.
ifeq ($(ARM64), y)
 AFLAGS		:= -mfloat-abi=hard
 DFLAGS		:= -march=armv8-a
endif


# Add general build options from the environment.
ifdef BUILD
 OPTS		+= -DBUILD=$(BUILD)
endif
ifdef COMMIT
 OPTS		+= -DCOMMIT=0x$(COMMIT)
endif
ifdef EXFLAGS
 OPTS		+= $(EXFLAGS)
endif
ifdef EXINC
 OPTS		+= -I$(EXINC)
endif
ifeq ($(CROSS), y)
  OPTS		+= -DUSE_CROSS
endif
ifeq ($(DEBUG), y)
 DFLAGS		+= -ggdb -D_DEBUG
 RFLAGS		+= -D_DEBUG
 AOPTIM		:=
 ifndef COPTIM
  COPTIM	:= -Og
 endif
else
 ifeq ($(OPTIM), y)
  AOPTIM	:= -mtune=native
  ifndef COPTIM
   COPTIM	:= -O3
  endif
 else
  ifndef COPTIM
   COPTIM	:= -O3
  endif
 endif
endif
ifeq ($(PROFILER), y)
 LFLAGS		+= -Xlinker -Map=$(PROG).map
endif
ifeq ($(LOGGING), y)
 OPTS		+= -D_LOGGING
 RFLAGS		+= -D_LOGGING
endif
ifeq ($(RELEASE), y)
 OPTS		+= -DRELEASE_BUILD
 RFLAGS		+= -DRELEASE_BUILD
endif
ifeq ($(X64), y)
 PLATCG		:= codegen_x86-64.o codegen_accumulate_x64.o
 CGOPS		:= codegen_ops_x86-64.h
 VCG		:= vid_voodoo_codegen_x86-64.h
else
 PLATCG		:= codegen_x86.o codegen_accumulate_x86.o
 CGOPS		:= codegen_ops_x86.h
 VCG		:= vid_voodoo_codegen_x86.h
endif
LIBS		:= -mwindows \
		   -lddraw -ldxguid -ld3d9 \
		   -lhid -lversion -lcomctl32 -lwinmm


# Optional modules.
ZLIB_NEEDED	:= n
MISCOBJ		:=

# Dynamic Recompiler (compiled-in)
ifndef DYNAREC
 DYNAREC	:= y
 ifeq ($(ARM), y)
  DYNAREC	:= n
 endif
 ifeq ($(ARM64), y)
  DYNAREC	:= n
 endif
endif
ifeq ($(DYNAREC), y)
 OPTS		+= -DUSE_DYNAREC
 RFLAGS		+= -DUSE_DYNAREC
 DYNARECOBJ	:= 386_dynarec_ops.o \
		    codegen.o \
		    codegen_ops.o \
		    codegen_timing_common.o codegen_timing_486.o \
		    codegen_timing_686.o codegen_timing_pentium.o \
		    codegen_timing_p6.o \
		    codegen_timing_winchip.o codegen_timing_winchip2.o \
		    $(PLATCG)
endif

# SLiRP: N=no, Y=yes,linked, D=yes,dynamic, S=yes,static (always dynamic)
ifndef SLIRP
 SLIRP		:= d
endif
ifneq ($(SLIRP), n)
 ifeq ($(SLIRP_PATH), )
  SLIRP_PATH	:= $(EXT_PATH)/slirp
 endif
 OPTS		+= -I$(SLIRP_PATH)/include
 ifeq ($(SLIRP), d)
  OPTS		+= -DUSE_SLIRP=2
 else
  OPTS		+= -DUSE_SLIRP=1
  LIBS		+= -L$(SLIRP_PATH)/lib/$(ARCH)
  ifeq ($(SLIRP), y)
   LIBS		+= -lslirp.dll
  endif
  ifeq ($(SLIRP), s)
   LIBS		+= -lslirp
  endif
 endif
 MISCOBJ	+= net_slirp.o
endif

# (Win)Pcap: N=no, Y=yes,linked, D=yes,dynamic, S=yes,static (always dynamic)
ifndef PCAP
 PCAP		:= d
endif
ifneq ($(PCAP), n)
 ifeq ($(PCAP_PATH), )
  PCAP_PATH	:= $(EXT_PATH)/pcap
 endif
 OPTS		+= -I$(PCAP_PATH)/include
 ifeq ($(PCAP), d)
  OPTS		+= -DUSE_PCAP=2
 else
  OPTS		+= -DUSE_PCAP=1
  LIBS		+= -L$(PCAP_PATH)/lib/$(ARCH)
  ifeq ($(PCAP), y)
   LIBS		+= -lwinpcap.dll
  endif
  ifeq ($(PCAP), s)
   LIBS		+= -lwinpcap
  endif
 endif
 MISCOBJ	+= net_pcap.o
endif

# UDPlink: N=no, Y=yes,linked, D=yes,dynamic, S=yes,static
ifndef UDP
 UDP		:= d
endif
ifneq ($(UDP), n)
 ifeq ($(UDP_PATH), )
  UDP_PATH	:= $(EXT_PATH)/udplink
 endif
 OPTS		+= -I$(UDP_PATH)/include
 ifeq ($(UDP), d)
  OPTS		+= -DUSE_UDPLINK=2
 else
  OPTS		+= -DUSE_UDPLINK=1
  LIBS		+= -L$(UDP_PATH)/lib/$(ARCH)
  ifeq ($(UDP), y)
   LIBS		+= -ludplink.dll
  endif
  ifeq ($(UDP), s)
   LIBS		+= -ludplink
   ZLIB_NEEDED	:= y
  endif
 endif
 MISCOBJ	+= net_udplink.o
endif

# VNS: N=no, Y=yes,linked, D=yes,dynamic, S=yes,static
ifndef VNS
 VNS		:= n
endif
ifneq ($(VNS), n)
 ifeq ($(VNS_PATH), )
  VNS_PATH	:= $(EXT_PATH)/vns
 endif
 OPTS		+= -I$(VNS_PATH)/include
 ifeq ($(VNS), d)
  OPTS		+= -DUSE_VNS=2
 else
  OPTS		+= -DUSE_VNS=1
  LIBS		+= -L$(VNS_PATH)/lib/$(ARCH)
  ifeq ($(VNS), y)
   LIBS		+= -lvns.dll
  endif
  ifeq ($(VNS), s)
   LIBS		+= -lvns
   ZLIB_NEEDED	:= y
  endif
 endif
 MISCOBJ	+= net_vns.o
endif

# FreeType (always dynamic)
ifndef FREETYPE
 FREETYPE	:= d
endif
ifneq ($(FREETYPE), n)
 ifeq ($(FREETYPE_PATH), )
  FREETYPE_PATH	:= $(EXT_PATH)/freetype
 endif
 OPTS		+= -DUSE_FREETYPE -I$(FREETYPE_PATH)/include
 ifeq ($(FREETYPE), d)
 endif
endif

# OpenAL (always dynamic)
ifndef OPENAL
 OPENAL		:= d
endif
ifneq ($(OPENAL), n)
 ifeq ($(OPENAL_PATH), )
  OPENAL_PATH	:= $(EXT_PATH)/openal
 endif
 OPTS		+= -DUSE_OPENAL -I$(OPENAL_PATH)/include
 ifeq ($(OPENAL), d)
 endif
endif

# FluidSynth (always dynamic)
ifndef FLUIDSYNTH
 FLUIDSYNTH	:= d
endif
ifneq ($(FLUIDSYNTH), n)
 ifeq ($(FLUIDSYNTH_PATH), )
  FLUIDSYNTH_PATH	:= $(EXT_PATH)/fluidsynth
 endif
 ifeq ($(FLUIDSYNTH), d)
 endif
 OPTS		+= -DUSE_FLUIDSYNTH -I$(FLUIDSYNTH_PATH)/include
endif

# MunT: N=no, Y=yes,linked, D=yes,dynamic, S=yes,static
ifndef MUNT
 MUNT		:= d
endif
ifneq ($(MUNT), n)
 ifeq ($(MUNT_PATH), )
  MUNT_PATH	:= $(EXT_PATH)/munt
 endif
 OPTS		+= -I$(MUNT_PATH)/include
 ifeq ($(MUNT), d)
  OPTS		+= -DUSE_MUNT=2
 else
  OPTS		+= -DUSE_MUNT=1
  LIBS		+= -L$(MUNT_PATH)/lib/$(ARCH)
  ifeq ($(MUNT), y)
   LIBS		+= -lmunt.dll
  endif
  ifeq ($(MUNT), s)
   LIBS		+= -lmunt
  endif
 endif
endif

# reSID: N=no, Y=yes,linked, D=yes,dynamic, S=yes,static
ifndef RESID
 RESID		:= d
endif
ifneq ($(RESID), n)
 ifeq ($(RESID_PATH), )
  RESID_PATH	:= $(EXT_PATH)/resid
 endif
 OPTS		+= -I$(RESID_PATH)/include
 ifeq ($(RESID), d)
  OPTS		+= -DUSE_RESID=2
 else
  OPTS		+= -DUSE_RESID=1
  LIBS		+= -L$(RESID_PATH)/lib/$(ARCH)
  ifeq ($(RESID), y)
   LIBS		+= -lresid.dll
  endif
  ifeq ($(RESID), s)
   LIBS		+= -lresid
  endif
 endif
 MISCOBJ	+= snd_ssi2001.o
endif

# SDL (always dynamic)
ifndef SDL
 SDL		:= y
endif
ifneq ($(SDL), n)
 ifeq ($(SDL_PATH), )
  SDL_PATH	:= $(EXT_PATH)/sdl
 endif
 OPTS		+= -I$(SDL_PATH)/include
 OPTS		+= -DUSE_SDL=1
 LIBS		+= -L$(SDL_PATH)/lib/$(ARCH)
 ifeq ($(SDL), y)
  LIBS		+= -lSDL2.dll
 endif
 ifeq ($(SDL), s)
  LIBS		+= -lSDL2
 endif
 SDLOBJ		:= win_sdl.o
endif

# VNC: N=no, Y=yes,linked, D=yes,dynamic, S=yes,static
ifndef VNC
 VNC		:= n
endif
ifneq ($(VNC), n)
 ifeq ($(VNC_PATH), )
  VNC_PATH	:= $(EXT_PATH)/vnc
 endif
 OPTS		+= -I$(VNC_PATH)/include
 ifeq ($(VNC), d)
  OPTS		+= -DUSE_VNC=2
 else
  OPTS		+= -DUSE_VNC=1
  LIBS		+= -L$(VNC_PATH)/lib/$(ARCH)
  ifeq ($(VNC), y)
   LIBS		+= -lvncserver.dll
  endif
  ifeq ($(VNC), s)
   LIBS		+= -lvncserver -lz -static -lpthread
  endif
 endif
 # The VNC includes need zlib.h ..
 ZLIB_NEEDED	:= (VNC)
 MISCOBJ	+= ui_vnc.o ui_vnc_keymap.o
endif

# RDP: N=no, Y=yes,linked, D=yes,dynamic, S=yes,static
ifndef RDP
 RDP		:= n
endif
ifneq ($(RDP), n)
 ifeq ($(RDP_PATH), )
  RDP_PATH	:= $(EXT_PATH)/rdp
 endif
 OPTS		+= -I$(RDP_PATH)/include
 ifeq ($(RDP), d)
  OPTS		+= -DUSE_RDP=2
 else
  OPTS		+= -DUSE_RDP=1
  LIBS		+= -L$(RDP_PATH)/lib/$(ARCH)
  ifeq ($(RDP), y)
   LIBS		+= -lrdp.dll
  endif
  ifeq ($(RDP), s)
   LIBS		+= -lrdp
  endif
 endif
 MISCOBJ	+= rdp.o
endif

# PNG: N=no, Y=yes,linked, D=yes,dynamic, S=yes,static
ifndef PNG
 PNG		:= d
endif
ifneq ($(PNG), n)
 ifeq ($(PNG_PATH), )
  PNG_PATH	:= $(EXT_PATH)/png
 endif
 OPTS		+= -I$(PNG_PATH)/include
 ifeq ($(PNG), d)
  OPTS		+= -DUSE_LIBPNG=2
 else
  OPTS		+= -DUSE_LIBPNG=1
  LIBS		+= -L$(PNG_PATH)/lib/$(ARCH)
  ifeq ($(PNG), y)
   # FIXME: should be -lpng.dll
   LIBS		+= -lpng
  endif
  ifeq ($(PNG), s)
   LIBS		+= -lpng -lz
   ZLIB_NEEDED	:= y
  endif
 endif
 MISCOBJ	+= png.o
endif

# MiniVHD: N=no, Y=yes,linked, D=yes,dynamic, S=yes,static
ifndef MINIVHD
 MINIVHD	:= y
endif
ifneq ($(MINIVHD), n)
 ifeq ($(MINIVHD_PATH), )
  MINIVHD_PATH	:= $(EXT_PATH)/minivhd
 endif
 OPTS		+= -I$(MINIVHD_PATH)/include
 ifeq ($(MINIVHD), d)
  OPTS		+= -DUSE_MINIVHD=2
 else
  OPTS		+= -DUSE_MINIVHD=1
  LIBS		+= -L$(MINIVHD_PATH)/lib/$(ARCH)
  ifeq ($(MINIVHD), y)
   LIBS		+= -lminivhd.dll
  endif
  ifeq ($(MINIVHD), s)
   LIBS		+= -lminivhd
  endif
 endif
endif

# libCHD: N=no, Y=yes
ifndef LIBCHD
 LIBCHD		:= n
endif
ifneq ($(LIBCHD), n)
 ifeq ($(LIBCHD_PATH), )
  LIBCHD_PATH	:= $(EXT_PATH)/libchdr
 endif
 OPTS		+= -DUSE_CHD -DHAVE_CONFIG_H -I$(LIBCHD_PATH) \
		   -I$(LIBCHD_PATH)/lzma -I$(LIBCHD_PATH)/FLAC
 MISCOBJ	+= libchdr_chd.o libchdr_cdrom.o libchdr_flac.o \
		   libchdr_huffman.o libchdr_bitstream.o
 MISCOBJ	+= stream_decoder.o bitreader.o format.o cpu_flac.o \
		   crc.o fixed.o lpc.o md5.o memory.o \
		   windows_unicode_filenames.o
 MISCOBJ	+= LzmaDec.o LzmaEnc.o LzFind.o
 ZLIB		:= $(LIBCHD)
endif

# ZLIB: N=no, Y=yes,linked, D=yes,dynamic, S=yes,static
ifndef ZLIB
 ZLIB		:= $(ZLIB_NEEDED)
endif
ifneq ($(ZLIB), n)
 ifeq ($(ZLIB_PATH), )
  ZLIB_PATH	:= $(EXT_PATH)/zlib
 endif
 OPTS		+= -I$(ZLIB_PATH)/include
 ifeq ($(ZLIB), d)
  OPTS		+= -DUSE_ZLIB=2
 else
  OPTS		+= -DUSE_ZLIB=1
  LIBS		+= -L$(ZLIB_PATH)/lib/$(ARCH)
  ifeq ($(ZLIB), y)
   LIBS		+= -lz
  endif
  ifeq ($(ZLIB), s)
   LIBS		+= -lz_static
  endif
 endif
endif

# WX: N=no, Y=yes,linked, D=yes,dynamic, S=yes,static
ifneq ($(WX), n)
 OPTS		+= -DUSE_WX=$(WX) $(WX_FLAGS)
 LIBS		+= $(WX_LIBS) -lm
 UIOBJ		:= wx_main.o wx_ui.o wx_stbar.o wx_render.o
else
 UIOBJ		:= win_ui.o \
		   win_ddraw.o win_d3d.o $(SDLOBJ) \
		   win_dialog.o win_about.o win_settings.o \
		   win_devconf.o win_snd_gain.o win_new_image.o
endif

# Options for the DEV branch.
ifeq ($(DEV_BRANCH), y)
 OPTS		+= -DDEV_BRANCH

 ifeq ($(AMD_K), y)
  OPTS		+= -DUSE_AMD_K
 endif

 ifeq ($(COMPAQ), y)
  OPTS		+= -DUSE_COMPAQ
  DEVBROBJ	+= m_compaq.o m_compaq_vid.o vid_cga_compaq.o
 endif

 ifeq ($(SANYO), y)
  OPTS		+= -DUSE_SANYO
  DEVBROBJ	+= m_sanyo.o
 endif

 ifeq ($(MICRAL), y)
  OPTS		+= -DUSE_MICRAL
  DEVBROBJ	+= m_bull.o
 endif

 ifeq ($(SUPERSPORT), y)
  OPTS		+= -DUSE_SUPERSPORT
  DEVBROBJ	+= m_zenith.o m_zenith_vid.o
 endif

 ifeq ($(PAS16), y)
  OPTS		+= -DUSE_PAS16
  DEVBROBJ	+= snd_pas16.o
 endif

 ifeq ($(GUSMAX), y)
  OPTS		+= -DUSE_GUSMAX
  DEVBROBJ	+= snd_cs423x.o
 endif

 ifeq ($(WONDER), y)
  OPTS		+= -DUSE_WONDER
 endif

 ifeq ($(XL24), y)
  OPTS		+= -DUSE_XL24
 endif

 ifeq ($(PRINTER), y)
  OPTS		+= -DUSE_PRINTER
  DEVBROBJ	+= prt_parallel.o
 endif

 ifeq ($(HOSTCD), y)
  OPTS		+= -DUSE_HOST_CDROM
 endif

 ifeq ($(CASSETTE), y)
  OPTS		+= -DUSE_CASSETTE
  DEVBROBJ	+= cassette.o
 endif

 ifeq ($(EL1), y)
  OPTS		+= -DUSE_EL1
  DEVBROBJ	+= net_3c501.o
 endif

 ifeq ($(PCNET), y)
  OPTS		+= -DUSE_IBMPCNET
  DEVBROBJ	+= net_ibmpcnet.o
 endif

 ifeq ($(ARTI), y)
  OPTS		+= -DUSE_ARTISOFT
  DEVBROBJ	+= net_arti2m.o
 endif

 ifeq ($(MODRIVES), y)
  OPTS		+= -DUSE_MO_DRIVES
 endif

endif


# Finalize the list of libraries to load.
LIBS		+= -lws2_32 -lwsock32 -liphlpapi -lpsapi
LIBS		+= -static -lstdc++ -lgcc
#ifneq ($(X64), y)
# LIBS		+= -Wl,--large-address-aware
#endif


# Final versions of the toolchain flags.
# FIXME: add the -Wsign-compare option soon!
CFLAGS		:= $(WX_FLAGS) $(OPTS) $(DFLAGS) $(COPTIM) $(AOPTIM) \
		   $(AFLAGS) -fomit-frame-pointer -mstackrealign \
		   -fno-strict-aliasing \
		   -Wall
ifdef xWALTJE
CFLAGS		+= -Wundef -Wunused-parameter -Wshadow -Wmissing-declarations
endif
# FIXME: temporary fix for GCC 10.3.0 "zero region" warnings in voodoo code
CFLAGS		+= -Wstringop-overflow=0

CXXFLAGS	:= $(WX_FLAGS) $(OPTS) $(DFLAGS) $(COPTIM) $(AOPTIM) \
		   $(AFLAGS) -fomit-frame-pointer -mstackrealign \
		   -fno-strict-aliasing \
		   -Wall -Wundef -Wmissing-declarations -Wunused-parameter \
		   -Wno-ctor-dtor-privacy -Woverloaded-virtual \
		   -fvisibility=hidden -fvisibility-inlines-hidden


#########################################################################
#		Create the (final) list of objects to build.		#
#########################################################################

RESDLL		:= VARCem-$(LANG)

MAINOBJ		:= pc.o config.o timer.o io.o mem.o rom.o rom_load.o \
		   device.o nvr.o misc.o random.o

UIOBJ		+= ui_main.o ui_lang.o ui_stbar.o ui_vidapi.o \
		   ui_cdrom.o ui_new_image.o ui_misc.o

CPUOBJ		:= cpu.o cpu_table.o \
		   808x.o 386.o x86seg.o x87.o \
		   386_dynarec.o $(DYNARECOBJ)

SYSOBJ		:= apm.o clk.o dma.o nmi.o pic.o pit.o ppi.o pci.o \
		   mca.o mcr.o memregs.o nvr_at.o nvr_ps2.o pnp.o port92.o

CHIPOBJ		:= neat.o scat.o scamp.o \
		   headland.o \
		   acc2036.o acc2168.o \
		   cs82c100.o \
		   sl82c460.o vl82c480.o \
		   ali1429.o \
		   opti495.o opti895.o \
		   sis471.o sis496.o \
		   wd76c10.o \
		   intel4x0.o

MCHOBJ		:= machine.o machine_table.o \
		    m_xt.o \
		    m_amstrad.o m_amstrad_vid.o \
		    m_europc.o m_laserxt.o m_thomson.o \
		    m_olim24.o m_olim24_vid.o \
		    m_tandy1000.o m_tandy1000_vid.o \
		    m_tosh1x00.o m_tosh1x00_vid.o \
		    m_xi8088.o \
		    m_pcjr.o \
		    m_ps1.o m_ps1_hdc.o \
		    m_ps2_isa.o m_ps2_mca.o \
		    m_at.o \
		    m_neat.o m_headland.o m_scat.o \
		    m_commodore.o m_hp.o m_pbell.o \
		    m_tosh3100e.o m_tosh3100e_vid.o \
		    m_ali.o m_opti495.o m_opti895.o m_sis471.o m_sis496.o \
		    m_wd76c10.o m_intel4x0.o \
		    m_acer.o m_aopen.o m_asus.o m_tyan.o \
		    m_sl82c460.o \
		    m_misc.o

DEVOBJ		:= bugger.o \
		   isamem.o isartc.o \
		   amidisk.o \
		   game.o game_dev.o \
		   parallel.o parallel_dev.o \
		    prt_text.o prt_cpmap.o prt_escp.o \
		   serial.o \
		   i2c.o i2c_eeprom.o i2c_gpio.o \
		   sio_acc3221.o sio_f82c710.o sio_fdc37c66x.o \
		   sio_fdc37c669.o sio_fdc37c93x.o \
		   sio_pc87306.o sio_pc87332.o \
		   sio_w83877f.o sio_w83787f.o \
		   sio_um8669f.o \
		   intel_flash.o intel_sio.o intel_piix.o \
		   keyboard.o \
		    keyboard_xt.o keyboard_at.o \
		   mouse.o \
		    mouse_serial.o mouse_ps2.o mouse_bus.o \
		   joystick.o \
		    js_standard.o js_ch_fs_pro.o \
		    js_sw_pad.o js_tm_fcs.o \

FDDOBJ		:= fdc.o \
		    fdc_pii15xb.o \
		   fdd.o \
		    fdd_common.o fdd_86f.o \
		    fdd_fdi.o fdi2raw.o lzf_c.o lzf_d.o \
		    fdd_imd.o fdd_img.o fdd_json.o fdd_mfm.o fdd_td0.o

HDDOBJ		:= hdd.o \
		    hdd_image.o hdd_table.o \
		   hdc.o \
		    hdc_st506_xt.o hdc_st506_at.o \
		    hdc_esdi_at.o hdc_esdi_mca.o \
		    hdc_ide_ata.o hdc_ide_xta.o hdc_xtide.o

CDROMOBJ	:= cdrom.o \
		   cdrom_speed.o \
		   cdrom_dosbox.o cdrom_image.o

ZIPOBJ		:= zip.o

MOOBJ		:= mo.o

ifeq ($(USB), y)
USBOBJ		:= usb.o
endif

SCSIOBJ		:= scsi.o \
		   scsi_device.o scsi_disk.o scsi_cdrom.o \
		    scsi_x54x.o scsi_aha154x.o scsi_buslogic.o \
		    scsi_ncr5380.o scsi_ncr53c810.o

NETOBJ		:= network.o \
		   network_dev.o \
		    net_dp8390.o \
		    net_ne2000.o net_wd80x3.o net_3c503.o

SNDOBJ		:= sound.o \
		    openal.o \
		   midi.o \
		     midi_system.o midi_mt32.o midi_fluidsynth.o \
		   sound_dev.o \
		    snd_opl.o snd_opl_nuked.o \
		    snd_speaker.o \
		    snd_lpt_dac.o snd_lpt_dss.o \
		    snd_adlib.o snd_adlibgold.o \
		    snd_ad1848.o \
		    snd_audiopci.o \
		    snd_cms.o \
		    snd_gus.o \
		    snd_sb.o snd_sb_dsp.o \
		    snd_emu8k.o \
		    snd_mpu401.o \
		    snd_sn76489.o \
		    snd_wss.o \
		    snd_ym7128.o

VIDOBJ		:= video.o \
		   video_dev.o \
		    vid_cga.o vid_cga_comp.o \
		    vid_mda.o \
		    vid_hercules.o vid_herculesplus.o vid_incolor.o \
		    vid_colorplus.o \
		    vid_genius.o \
		    vid_pgc.o vid_im1024.o \
		    vid_sigma.o \
		    vid_wy700.o \
		    vid_ega.o vid_ega_render.o \
		    vid_svga.o vid_svga_render.o \
		    vid_vga.o \
		    vid_ddc.o \
		    vid_ati_eeprom.o \
		    vid_ati18800.o vid_ati28800.o \
		    vid_ati_mach64.o vid_ati68860_ramdac.o \
		    vid_att20c49x_ramdac.o vid_bt48x_ramdac.o \
		    vid_sc1148x_ramdac.o \
		    vid_av9194.o vid_icd2061.o vid_ics2595.o \
		    vid_cl54xx.o \
		    vid_et4000.o vid_sc1502x_ramdac.o \
		    vid_et4000w32.o vid_stg_ramdac.o \
		    vid_ht216.o \
		    vid_oak_oti.o \
		    vid_paradise.o \
		    vid_ti_cf62011.o \
		    vid_tvga.o \
		    vid_tgui9440.o vid_tkd8001_ramdac.o \
		    vid_s3.o vid_s3_virge.o \
		    vid_sdac_ramdac.o \
		    vid_voodoo.o vid_voodoo_banshee.o \
		    vid_voodoo_blitter.o vid_voodoo_banshee_blitter.o vid_voodoo_display.o \
		    vid_voodoo_fb.o vid_voodoo_fifo.o vid_voodoo_reg.o \
		    vid_voodoo_render.o vid_voodoo_setup.o vid_voodoo_texture.o \

PLATOBJ		:= win.o \
		   win_lang.o win_dynld.o win_opendir.o win_thread.o \
		   win_cdrom.o win_keyboard.o win_serial.o win_midi.o \
		   win_mouse.o win_joystick.o


OBJ		:= $(MAINOBJ) $(CPUOBJ) $(MCHOBJ) $(SYSOBJ) $(CHIPOBJ) \
		   $(DEVOBJ) $(FDDOBJ) $(CDROMOBJ) $(ZIPOBJ) $(MOOBJ) \
		   $(HDDOBJ) $(USBOBJ) $(NETOBJ) $(SCSIOBJ) $(SNDOBJ) \
		   $(VIDOBJ) $(UIOBJ) $(PLATOBJ) $(MISCOBJ) $(DEVBROBJ)
ifdef EXOBJ
OBJ		+= $(EXOBJ)
endif


# Build module rules.
ifeq ($(AUTODEP), y)
%.o:		%.c
		@echo $<
		@$(CC) $(CFLAGS) $(DEPS) -c $<

%.o:		%.cpp
		@echo $<
		@$(CPP) $(CXXFLAGS) $(DEPS) -c $<
else
%.o:		%.c
		@echo $<
		@$(CC) $(CFLAGS) -c $<

%.o:		%.cpp
		@echo $<
		@$(CPP) $(CXXFLAGS) -c $<

%.d:		%.c $(wildcard $*.d)
		@echo $<
		@$(CC) $(CFLAGS) $(DEPS) -E $< >NUL

%.d:		%.cpp $(wildcard $*.d)
		@echo $<
		@$(CPP) $(CXXFLAGS) $(DEPS) -E $< >NUL
endif


all:		$(PREBUILD) $(PROG).exe $(NETIF).exe $(POSTBUILD)


# Create a script (command file) that figures out which
# language we want to make (its argument is the 2-letter
# language name, or none) by looking it up in the database
# of supported ones, and then it calls the (this) Makefile
# back with the proper args for that target.
win/Mklang.cmd:	win/Makefile.MinGW
		@echo @SET PATH=$(PATH) >win\Mklang.cmd
		@echo @SETLOCAL >>win\Mklang.cmd
		@echo @SET WANT=none >>win\Mklang.cmd
		@echo @FOR /F "eol=# tokens=1,2,3,4,5* delims=, " %%%%i in (ui\lang\VARCem.lang) do @if "%%1"=="%%%%i" set WANT=LANG=%%%%i LANGID=%%%%j PRILANG=%%%%k SUBLANG=%%%%l >>win\Mklang.cmd
		@echo @IF NOT "%%WANT%%"=="none" @$(MAKE) -fwin/Makefile.MinGW "RFLAGS=$(RFLAGS)" %%WANT%% VARCem-%%1.dll >>win\Mklang.cmd

langs:		win/Mklang.cmd
ifdef LANG
		@echo Generating localization $(LANG) ..
		@win\Mklang $(LANG)
else
		@echo Generating localizations..
		@FOR /F "eol=# tokens=1 delims=, " %%i in (ui\lang\VARCem.lang) do @win\Mklang %%i
endif
		@-rm win\Mklang.cmd

$(RESDLL).rc:	VARCem.rpp
		@echo Generating $< ..
		@win\preproc.cmd $< $@ $(PREPROC) "-DPREAMBLE=" "-DLANG=$(LANG)" "-DLANGID=$(LANGID)" "-DPRILANG=$(PRILANG)" "-DSUBLANG=$(SUBLANG)"

$(RESDLL).res:	$(RESDLL).rc VARCem-common.rc
		@echo Processing $< ..
		@$(WINDRES) $(RFLAGS) -i $< -o $@

$(RESDLL).dll:	$(RESDLL).res
		@echo Linking $@ ..
		$(CC) $(LFLAGS) -shared -o $@ $<
		@strip --strip-unneeded $@
		@-rm $(RESDLL).rc

VARCem.res:	VARCem.rc VARCem.mpp
		@echo Generating Manifest file..
		@$(PREPROC) win/VARCem.mpp >VARCem.manifest
		@echo Processing $<
		@$(WINDRES) $(RFLAGS) -i $< -o VARCem.res

$(PROG).exe:	VARCem.res $(OBJ)
		@echo Linking $@ ..
		@$(CC) $(LFLAGS) -o $@ $(OBJ) $< $(LIBS)
ifneq ($(DEBUG), y)
		@$(STRIP) $@
endif

pcap_if.res:	pcap_if.rc
		@echo Processing $<
		@$(WINDRES) $(RFLAGS) -i $< -o pcap_if.res

$(NETIF).exe:	pcap_if.o win_dynld.o pcap_if.res
		@echo Linking $(NETIF).exe ..
		@$(CC) $(LFLAGS) -o $@ \
			pcap_if.o win_dynld.o pcap_if.res
ifneq ($(DEBUG), y)
		@$(STRIP) $(NETIF).exe
endif


clean:
		@echo Cleaning objects..
		@-rm -f *.o
		@-rm -f *.res

clobber:	clean
		@echo Cleaning executables..
		@-rm -f *.d
		@-rm -f *.exe
		@-rm -f *.dll
ifeq ($(PROFILER), y)
		@-rm -f *.map
endif
		@-rm -f *.manifest
#		@-rm -f $(DEPFILE)

ifneq ($(AUTODEP), y)
depclean:
		@-rm -f $(DEPFILE)
		@echo Creating dependencies..
		@echo # Run "make depends" to re-create this file. >$(DEPFILE)

depends:	DEPOBJ=$(OBJ:%.o=%.d)
depends:	depclean $(OBJ:%.o=%.d)
		@$(CAT) $(DEPOBJ) >>$(DEPFILE)
#		@-rm -f $(DEPOBJ)

$(DEPFILE):
endif


# Module dependencies.
ifeq ($(AUTODEP), y)
#-include $(OBJ:%.o=%.d)  (better, but sloooowwwww)
-include *.d
else
include $(wildcard $(DEPFILE))
endif


# End of Makefile.MinGW.

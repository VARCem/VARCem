#
# VARCem	Virtual ARchaeological Computer EMulator.
#		An emulator of (mostly) x86-based PC systems and devices,
#		using the ISA,EISA,VLB,MCA  and PCI system buses, roughly
#		spanning the era between 1981 and 1995.
#
#		This file is part of the VARCem Project.
#
#		Project file for the CircleCI remote builder service.
#
# Version:	@(#)config.yml	1.0.1	2023/02/23
#
# Author:	Fred N. van Kempen, <waltje@varcem.com>
#
#		Copyright 2023 Fred N. van Kempen.
#
#		Redistribution and  use  in source  and binary forms, with
#		or  without modification, are permitted  provided that the
#		following conditions are met:
#
#		1. Redistributions of  source  code must retain the entire
#		   above notice, this list of conditions and the following
#		   disclaimer.
#
#		2. Redistributions in binary form must reproduce the above
#		   copyright  notice,  this list  of  conditions  and  the
#		   following disclaimer in  the documentation and/or other
#		   materials provided with the distribution.
#
#		3. Neither the  name of the copyright holder nor the names
#		   of  its  contributors may be used to endorse or promote
#		   products  derived from  this  software without specific
#		   prior written permission.
#
# THIS SOFTWARE  IS  PROVIDED BY THE  COPYRIGHT  HOLDERS AND CONTRIBUTORS
# "AS IS" AND  ANY EXPRESS  OR  IMPLIED  WARRANTIES,  INCLUDING, BUT  NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE  ARE  DISCLAIMED. IN  NO  EVENT  SHALL THE COPYRIGHT
# HOLDER OR  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE  GOODS OR SERVICES;  LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  AND ON  ANY
# THEORY OF  LIABILITY, WHETHER IN  CONTRACT, STRICT  LIABILITY, OR  TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  IN ANY  WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Use the latest version of the CircleCI pipeline process engine.
version: 2.1


# Global (public) variables.
environment:
  MY_FILES: "/tmp/files"


# List the various executor types we will be using.
executors:
  "windows":
    # Linux VM for installing MinGW.
    machine:
      image: ubuntu-2204:current

  "windows-docker":
    # Docker using the Base Convenience Image.
    docker:
      - image: cimg/base:stable
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD

  "linux":
    # A Linux VM running Ubuntu 20.04.
    machine:
      image: ubuntu-2004:202107-02

  "macos":
    # macOS VM running Xcode.
    macos:
      xcode: 12.5.1


# Define a job to be invoked later in a workflow.
jobs:
  build:
    parameters:
      os:
        type: string
      tag:
        type: string

    resource_class: medium

    executor: << parameters.os >>

    environment:
      # Export these dynamic variables to the build environment.
      CIRCLE_PIPELINE_NUM: << pipeline.number >>
      CIRCLE_PIPELINE_TRIG: << pipeline.trigger_source >>
      CIRCLE_PIPELINE_TAG: << pipeline.git.tag >>

    steps:
      # Get the repository from GitHub.
      - checkout

      # Say hello.
      - run: echo Building "<< parameters.tag >>" for << parameters.os >>

      # Install updates.
      - run:
          command: |
                echo Installing updates..
                sudo apt-get update && sudo apt-get install -y

      # Install dependencies such as MinGW and friends.
      - run:
          command: |
                echo Installing dependencies..
                sudo apt-get install -y mingw-w64
#               sudo apt-get install -y libz-mingw-w64-dev

      # Create temp folder where artifacts are collected.
      - run:
          command: |
                chmod +x .circleci/build.sh .circleci/deploy.sh
                mkdir -p /tmp/files

      # Actually perform the build.
      - run:
          command: |
                ./.circleci/build.sh << parameters.tag >>


# We will probably have to use one of the non-registered Discord
# orbs for this sometime soon.
#notifications:
#  irc:
#    channels:
#      - "ircs://irc.varcem.com:6697#varcem-dev"
#    template:
#      - "Build #%{build_number} for #%{commit} by %{author} in %{branch} %{result}."
#      - "Commit subject: %{commit_subject}"
#      - "View changes at %{compare_url}"
#      - "View build details at %{build_url}"


# Invoke jobs via workflows.
#
# We use a matrix to generate builds for several platforms with
# a number of selected features and we define that here using
# parametrized jobs and a matrix.
workflows:
  build_all:
    jobs:
      - build:
          matrix:
            parameters: &params
              os: [windows]
              tag: ["std","log","dbg","dev"]
          name: build-<< matrix.os >>-<< matrix.tag >>

#      - save:
#        name: save<< matrix.tag >>
#        matrix:
#          parameters:
#            <<: *params
#        requires:
#          build-<< matrix.os >>-<< matrix.tag >>

      # Upload the results to our webserver.
#      - upload:
#          requires:
#            save
#          run:
#            command: ./.circleci/deploy.sh


# End of file.

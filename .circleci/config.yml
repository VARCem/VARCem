#
# VARCem	Virtual ARchaeological Computer EMulator.
#		An emulator of (mostly) x86-based PC systems and devices,
#		using the ISA,EISA,VLB,MCA  and PCI system buses, roughly
#		spanning the era between 1981 and 1995.
#
#		This file is part of the VARCem Project.
#
#		Project file for the CircleCI remote builder service.
#
# Version:	@(#)config.yml	1.0.1	2023/02/20
#
# Author:	Fred N. van Kempen, <waltje@varcem.com>
#
#		Copyright 2023 Fred N. van Kempen.
#
#		Redistribution and  use  in source  and binary forms, with
#		or  without modification, are permitted  provided that the
#		following conditions are met:
#
#		1. Redistributions of  source  code must retain the entire
#		   above notice, this list of conditions and the following
#		   disclaimer.
#
#		2. Redistributions in binary form must reproduce the above
#		   copyright  notice,  this list  of  conditions  and  the
#		   following disclaimer in  the documentation and/or other
#		   materials provided with the distribution.
#
#		3. Neither the  name of the copyright holder nor the names
#		   of  its  contributors may be used to endorse or promote
#		   products  derived from  this  software without specific
#		   prior written permission.
#
# THIS SOFTWARE  IS  PROVIDED BY THE  COPYRIGHT  HOLDERS AND CONTRIBUTORS
# "AS IS" AND  ANY EXPRESS  OR  IMPLIED  WARRANTIES,  INCLUDING, BUT  NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE  ARE  DISCLAIMED. IN  NO  EVENT  SHALL THE COPYRIGHT
# HOLDER OR  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE  GOODS OR SERVICES;  LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  AND ON  ANY
# THEORY OF  LIABILITY, WHETHER IN  CONTRACT, STRICT  LIABILITY, OR  TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  IN ANY  WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Use the latest version of the CircleCI pipeline process engine.
version: 2.1


environment:
  MY_NAME: "VARCem"
  MY_FILES: "/tmp/files"


# List the various executor types we will be using.
executors:
  # Docker using the Base Convenience Image.
  docker:
    - image: "cimg/base:stable"
      auth:
        username: mydockerhub-user
        password: $DOCKERHUB_PASSWORD

  # A Linux VM running Ubuntu 20.04.
  linux:
    machine:
      image: ubuntu-2004:202107-02

  # macOS executor running Xcode.
  macos:
    macos:
      xcode: 12.5.1


# Define a job to be invoked later in a workflow.
jobs:
  build:
    parameters:
      os:
        type: executor
      tag:
        type: string
      flags:
        type: string

    executor: << parameters.os >>

    steps:
      # Get the repository from GitHub.
      - checkout

      # Say hello.
      - run:
        command: echo Building $MY_NAME<< parameters.tag >> (flags=<< parameters.flags >>)

      # Install updates.
      - run:
        command: 'sudo apt-get update && sudo apt-get install -y && sudo rm -rf /var/lib/apt/lists/*'

      # Install dependencies such as MinGW and friends.
      - run:
        command: |
                sudo apt-get install -y binutils-mingw-w64-i686
                sudo apt-get install -y gcc-mingw-w64-i686
                sudo apt-get install -y gcc-mingw-w64
                sudo apt-get install -y mingw-w64
#               sudo apt-get install -y binutils-mingw-w64-x86-64
#               sudo apt-get install -y gcc-mingw-w64-x86-64
                sudo apt-get install -y cmake
#               sudo apt-get install -y libz-mingw-w64-dev

      # Show relevant versions.
      - run:
        command: |
                gcc --version
                cmake --version

      # Actually perform the build.
      - run:
        environment:
          MAKEFLAGS="-j 4"
        command: chmod +x .circleci/build.sh .circleci/deploy.sh
        command: ./.circleci/build.sh << parameters.flags >>

      # On success, we should save the build results!
      - run:
        command: |
                mkdir -p ${MY_FILES}
                cp *.exe ${MY_FILES}


#notifications:
#  irc:
#    channels:
#      - "ircs://irc.varcem.com:6697#varcem-dev"
#    template:
#      - "Build #%{build_number} for #%{commit} by %{author} in %{branch} %{result}."
#      - "Commit subject: %{commit_subject}"
#      - "View changes at %{compare_url}"
#      - "View build details at %{build_url}"


# Invoke jobs via workflows.
#
# We use a matrix to generate builds for several platforms with
# a number of selected features. In Travis-CI, this was:
#
#  matrix:
#    - PROG=VARCem CROSS=y DEBUG=n
#    - PROG=VARCem CROSS=y DEBUG=n LOGGING=y
#    - PROG=VARCem CROSS=y DEBUG=y
#    - PROG=VARCem_dev CROSS=y DEBUG=y DEV_BUILD=y
#
# and we define that here using parametrized jobs and a matrix.
workflows:
  workflow:
    jobs:
      # Build one member job of the matrix.
      - build:
        name: build<< matrix.tag >>
        matrix:
          parameters:
            os: [docker,linux]
            tag: ["","-log","-dbg","-dev"]
            flags: |
              ["PROG=VARCem CROSS=y DEBUG=n",
              ["PROG=VARCem CROSS=y DEBUG=n LOGGING=y",
              ["PROG=VARCem CROSS=y DEBUG=n",
              ["PROG=VARCem_dev CROSS=y DEBUG=y DEV_BUILD=y"]
        requires:
          build<< matrix.tag >>

      # Save files from one member job of the matrix.
#      - save:
#        name: save<< matrix.tag >>
#        matrix:
#          parameters:
#            os: [docker,linux]
#            tag: ["","-log","-dbg","-dev"]
#        requires:
#          save<< matrix.tag >>

      # Upload the results to our webserver.
#      - upload:
#          requires:
#            save
#          run:
#            command: ./.circleci/deploy.sh


# End of file.
